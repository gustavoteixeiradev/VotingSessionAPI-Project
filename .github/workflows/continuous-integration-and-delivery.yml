name: Continuous Integration and Delivery

on:
  push:
    branches:
      - main
      - development

jobs:

  test:
    name: Test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Build with Gradle
        run: ./gradlew build


  sonarcloud:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonarqube --info


  heroku:
    name: Deploy to Heroku
    runs-on: ubuntu-18.04
    needs: [sonarcloud]

    steps:
      - uses: actions/checkout@v2
      - name: Deploy to Heroku
        uses: AkhileshNS/heroku-deploy@v3.8.8
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          heroku_app_name: ${{secrets.HEROKU_APP}}

  docker:
    name: Publish on Docker Hub
    runs-on: ubuntu-18.04
    needs: [sonarcloud]
    env:
      REPO: teixeira963

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Build with Gradle
        run: ./gradlew build

      - name: Docker Login
        uses: docker/login-action@v1.8.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v2.3.0
        with:
          context: .
          file: ./Dockerfile
          tags: |
            teixeira963/voting-session-api:latest
            teixeira963/voting-session-api:${{ github.run_number }}
          push: true


  notifySlackHeroku:
    name: Notify deployment on Heroku
    runs-on: ubuntu-18.04
    needs: [heroku]

    steps:
      - name: Notify slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: abinoda/slack-action@master
        with:
          args: '{\"channel\":\"C01VA672CJH\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Successfully* run the pipeline, deployed on Heroku!!\"}}]}'


  notifySlackDockerHub:
    name: Notify published on DockerHub
    runs-on: ubuntu-18.04
    needs: [docker]

    steps:
      - name: Notify slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: abinoda/slack-action@master
        with:
          args: '{\"channel\":\"C01VA672CJH\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Successfully* run the pipeline, published on DokerHub!\"}}]}'


  notifySlackIfFailure:
    name: Notify failure
    runs-on: ubuntu-18.04
    needs: [heroku, docker]
    if: failure()

    steps:
      - name: Notify slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: abinoda/slack-action@master
        with:
          args: '{\"channel\":\"C01VA672CJH\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Failed* to run the pipeline!\"}}]}'